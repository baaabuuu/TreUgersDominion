package ai;

import objects.BoardState;
import objects.CardOption;
import objects.PlayerHand;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import cards.Card;
import log.Log;

public class AI
{
	public HashMap<String, Integer> deck = new HashMap<String, Integer>();
	private String aiType = "NONE";
	public Card[] supply;
	private PlayerHand hand;
	private int playerCount;
	BoardState state;
	
	public String getAIType()
	{
		return aiType;
	}
	
	/**
	 * Gets the board state
	 */
	public void getBoardState()
	{
		
	}
	/**
	 * Go to next phase
	 */
	public void nextPhase()
	{
		
	}
	
	public List<Card> getList()
	{
		return new ArrayList<Card>();
	}
	
	/**
	 * Gets the count of cards with the name from the boardState
	 * @param name
	 * @return
	 */
	public int stateGetCount(String name)
	{
		Log.log(aiType + " counting copies of " + name);
		for (int i = 0; i < supply.length; i++)
		{
			if (supply[i].getName() == name)
				return state.getShopArea()[i];
		}
		return 0;
	}
	
	/**
	 * Returns the amount of money generated by playing all treasure cards in hand.
	 * @return
	 */
	public int getMoney()
	{
		int sum = 0;
		int offset = 0;
		while(true)
		{
			Card card = hand.getCards()[offset];
			boolean isTreasure = false;
			for (String type : card.getDisplayTypes())
			{
				if (type == "Treasure")
				{
					sum += hand.getCards()[offset].getMoney();
					playCard(offset);
					break;
				}
			}
			if (!isTreasure)
			{
				offset += 1;
			}
			if (offset >= hand.getCards().length)
				break;
			
		}
		Log.log(getAIType() + " total money " + sum);
		return sum;
	}
	
	/**
	 * Takes the boardState
	 */
	public void updateBoardState()
	{
		
	}
	
	/**
	 * Takes the boardState
	 */
	public void updatePlayerHand()
	{
		
	}
	
	/**
	 * Plays a card
	 */
	public void playCard(int index)
	{
		Log.log(getAIType() + "  - play card request");
		//Call play code
	}
	
	/**
	 * Tries to buy a card with the following name
	 * @param name
	 */
	public void buy(String name)
	{
		int val = (deck.get(name) == null) ? 0 : deck.get(name);
		deck.put(name, val + 1);
		Log.log(getAIType() + "  - buy request");
		//Send data
	}
	
	/**
	 * Runs the turn - every AI needs this implemented
	 */
	public void runTurn()
	{
		
	}

}
